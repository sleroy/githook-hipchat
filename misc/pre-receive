#!/usr/bin/env groovy

import static java.lang.System.*
import java.util.regex.Pattern;
import java.util.*;

class CommitMessageVerificator {


	def MIN_SIZE = 10
	def ANSI_RESET = "\u001B[0m"
	def ANSI_BLACK = "\u001B[30m"
	def ANSI_RED = "\u001B[31m"
	def ANSI_GREEN = "\u001B[32m"
	def ANSI_YELLOW = "\u001B[33m"
	def ANSI_BLUE = "\u001B[34m"
	def ANSI_PURPLE = "\u001B[35m"
	def ANSI_CYAN = "\u001B[36m"
	def ANSI_WHITE = "\u001B[37m"


	def errorM(message) {
		err.println ANSI_RED + "\t[ERROR] $message"+ ANSI_RESET
	}
	
	def infoM(message) {
		err.println ANSI_BLUE + "$message"+  ANSI_RESET
	}
	def okM(message) {
		err.println ANSI_GREEN + "\t[OK] $message"+ ANSI_RESET
	}
	def warnM(message) {
		err.println ANSI_YELLOW + "\t[WARN] $message"+ ANSI_RESET
	}

	def check(commitMessage0) {
		Set<String> commits = new HashSet<String>();
		String[] commitTable = commitMessage0.split('\n');
		for (String commitMessage in commitTable) {
			commits.add(commitMessage);

			infoM "Analyse du message de commit.... $commitMessage"
			if (!commitMessage) {
		           errorM 'Commit message is empty'
			} else {
			   okM "Commit message not empty" 
			}
	
			if (commitMessage.length() < MIN_SIZE) {
			  errorM "Commit message too small ${commitMessage.length()} < $MIN_SIZE"
			} else {
			  okM "Commit minimal size $MIN_SIZE"
			}
			
			def Pattern redminePattern = Pattern.compile(".*(#[0-9]+).*");
			def commit = commitMessage.replace('\r', ' ').replace('\n', ' ');		
			def matcher = redminePattern.matcher(commit);
		        if (!matcher.matches()) {
		          warnM "Commit message does not contains a redmine ticket."
		        } else {
		          okM 'Commit contains an issue ' + matcher.group(1)
		        }			
	
		}	
		if (commits.size() != commitTable.length) {
			errorM "Presence of duplicated commit message!"
		}		
		exit 0

	}
}
def rArgs = in.text.split(' ')
//out.println rArgs
def command = "git log --pretty=%s ${rArgs[0]}..${rArgs[1]}"


def proc = command.execute()                 // Call *execute* on the string
//out.println "Command $command"

proc.waitFor()

def commitMessage = proc.in.text
//out.println commitMessage
new CommitMessageVerificator().check(commitMessage)
